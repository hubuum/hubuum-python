{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hubuum documentation","text":""},{"location":"#license","title":"License","text":"<p>Hubuum is licensed under the Creative Commons Legal Code, CC0 1.0 Universal.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<ul> <li>Django</li> <li>Django REST Framework</li> <li>mkdocs</li> <li>mkdocs-material</li> <li>django-rest-knox</li> </ul>"},{"location":"about/","title":"About","text":"<p>Hubuum is a non-opinionated content management database. Through the use of extensions, it can be used to store data from nearly any source, while providing a unified API to access all the data.</p>"},{"location":"about/#features","title":"Features","text":"<ul> <li>A REST API to access your resources</li> <li>Fine-grained group-based permissions</li> <li>The possibility to extend models with generic JSON data</li> </ul>"},{"location":"about/#maintainers","title":"Maintainers","text":"<ul> <li>Terje Kvernes</li> </ul>"},{"location":"api/","title":"The hubuum API","text":""},{"location":"api/#filtering","title":"Filtering","text":"<p>Querying using the API is done via standard HTTP GET requests using django-filter. The API supports filtering, ordering, and pagination. The API also supports querying JSON fields of the models directly (see below).</p> <p>Note</p> <p>Filtering on a field that does not exist, or using an unsupported lookup key for an existing, field will return <code>400 Bad Request</code>, with some information about the fields or lookups that failed.</p>"},{"location":"api/#operators","title":"Operators","text":""},{"location":"api/#text-or-character-fields","title":"Text or character fields","text":"<p>For text or character fields, the following operators are supported:</p> <ul> <li><code>exact</code> (default)</li> <li><code>startswith</code> (case-sensitive, string start with)</li> <li><code>endswith</code> (case-sensitive, string end with)</li> <li><code>contains</code> (case-sensitive, string contains)</li> <li><code>regex</code> (case-sensitive, regular expression)</li> </ul> <p>These may also be prefixed with <code>i</code> to make them case-insensitive, eg. <code>icontains</code>.</p>"},{"location":"api/#examples","title":"Examples","text":"<pre><code># These two are identical:\n/iam/users/?name=johndoe\n/iam/users/?name__exact=johndoe\n\n# Find all users with a username that ends with \"doe\"\n/iam/users/?name__endswith=doe\n/iam/users/?name__regex=doe$\n\n# Find all users that start with \"john\"\n/iam/users/?name__startswith=john\n/iam/users/?name__regex=^john\n\n# Find all users that start with \"j\", contains \"do\", and ends with \"e\"\n/iam/users/?name__regex=^j.*do.*e$\n</code></pre>"},{"location":"api/#numeric-fields","title":"Numeric fields","text":"<p>For numeric fields, the following operators are supported:</p> <ul> <li><code>exact</code> (default)</li> <li><code>gt</code> (greater than)</li> <li><code>gte</code> (greater than or equal to)</li> <li><code>lt</code> (less than)</li> <li><code>lte</code> (less than or equal to)</li> <li><code>range</code> (between)</li> </ul>"},{"location":"api/#examples_1","title":"Examples","text":"<pre><code># These two are identical:\n/iam/users/?id=1\n/iam/users/?id__exact=1\n\n# Find all users with an ID over 5 but under 9, these three are identical\n/iam/users/?id__gt=5&amp;id__lt=9\n/iam/users/?id__gte=6&amp;id__lte=8\n/iam/users/?id__range=6,8\n</code></pre>"},{"location":"api/#date-fields","title":"Date fields","text":"<p>For date fields, the following operators are supported:</p> <ul> <li><code>exact</code> (default)</li> <li><code>day</code> (day of the month)</li> <li><code>week</code> (week of the year)</li> <li><code>month</code> (month of the year)</li> <li><code>year</code> (year)</li> <li><code>quarter</code> (quarter of the year)</li> <li><code>week_day</code> (day of the week)</li> <li><code>iso_week_day</code> (day of the week, ISO 8601)</li> <li><code>iso_year</code> (week of the year, ISO 8601)</li> </ul>"},{"location":"api/#json-fields","title":"JSON fields","text":"<p>The API supports querying JSON fields of the models directly. This is done by querying the field name suffixed by <code>__lookup</code>. For example, to query the <code>json_data</code> field of the <code>Extension</code> model, you would use <code>json_data_lookup</code> as the lookup key.</p> <p>When querying into the json field, use <code>__</code> to separate the keys. Some mapping examples:</p> <pre><code>1. json_data['foo']==value\n# /?json_data_lookup__foo=value\n2. json_data['foo']['bar']==value\n# /?json_data_lookup__foo__bar=value\n3. if 'value'.lower() in json_data['foo']['bar'].lower()\n# /?json_data_lookup__foo__bar__icontains=value\n</code></pre> <p>Warning</p> <p>You always want to use case-insensitive operators for JSON fields. Otherwise, you will get unexpected (ie, no) results.</p>"},{"location":"code-style/","title":"Code Style","text":""},{"location":"code-style/#general","title":"General","text":"<ul> <li>Black is the code style used for this project. It is enforced by the CI.</li> <li>isort is used to sort imports, also enforced by the CI.</li> <li>flake8 is used to enforce the code style.</li> <li>pylint is used to check code quality. Anything below 10/10 is considered a failure.</li> <li>coverage is used to check code coverage. Anything below 100% is considered a failure.</li> </ul>"},{"location":"code-style/#checking-code-style","title":"Checking Code Style","text":"<ul> <li><code>tox -e format</code> will run black, isort, and pylint on the codebase.</li> <li><code>tox -e flake8</code> will run flake8 with the required extensions on the codebase.</li> </ul>"},{"location":"code-style/#checking-code-coverage","title":"Checking Code Coverage","text":"<ul> <li><code>tox -e coverage</code> will run coverage on the codebase. Afterwards, <code>coverage report -m</code> can be used to see the coverage report.</li> </ul>"},{"location":"code-style/#external-resources","title":"External resources","text":"<p>Coveralls and Codiga are used to check code coverage and code quality respectively for pull requests. Both have to pass without errors (ie, no decrease in coverage or code quality) for a pull request to be merged. The following links can be used to view the current status of the project:</p> <ul> <li>Coveralls.io</li> <li>Codiga.io</li> </ul>"},{"location":"configuration/","title":"Hubuum Django App Environment Variables","text":"<p>This document provides an overview of the environment variables that can be set to influence the behavior of the Hubuum Django app.</p> <p>Note</p> <p>Hubuum validates all environment variables prefixed with HUBUUM_. Any unexpected environment variables under that prefix will be reported and the application will exit.</p>"},{"location":"configuration/#core-options","title":"Core options","text":"<ul> <li><code>HUBUUM_SECRET_KEY</code>: Setting this sets the secret key for the Django framework. If you do not set this yourself, a random key will be generated on startup. Setting this environment variable will put the application into production mode.</li> </ul>"},{"location":"configuration/#database-access","title":"Database Access","text":"<p>Currently supported engines are \"django.db.backends.postgresql\" and \"django.db.backends.sqlite3\". If \"django.db.backends.sqlite3\" is chosen, the only other option used is <code>HUBUUM_DATABASE_NAME</code>.</p> <ul> <li><code>HUBUUM_DATABASE_ENGINE</code>: Sets the database engine. Defaults to \"django.db.backends.postgresql\".</li> <li><code>HUBUUM_DATABASE_NAME</code>: Sets the name of the database. Defaults to \"hubuum\".</li> <li><code>HUBUUM_DATABASE_USER</code>: Sets the database user. Defaults to \"hubuum\".</li> <li><code>HUBUUM_DATABASE_PASSWORD</code>: Sets the password for the database user. Defaults to <code>None</code>. Must be set if <code>HUBUUM_DATABASE_ENGINE</code> is \"django.db.backends.postgresql\".</li> <li><code>HUBUUM_DATABASE_HOST</code>: Sets the database host. Defaults to \"localhost\".</li> <li><code>HUBUUM_DATABASE_PORT</code>: Sets the port for the database. Defaults to 5432.</li> </ul>"},{"location":"configuration/#logging","title":"Logging","text":"<p>For detailed information on logging, see the logging documentation. Loggers that take log values as input accept the following values: DEBUG, INFO, WARNING, ERROR, CRITICAL. </p>"},{"location":"configuration/#core-logging-options","title":"Core logging options","text":"<ul> <li><code>HUBUUM_LOGGING_LEVEL</code>: Sets the default logging level for all sources. Defaults to \"CRITICAL\".</li> <li><code>HUBUUM_LOGGING_PRODUCTION</code>: Determines if logging is in production mode or not. In production we get no colored output and the JSON layout is compact. Defaults to <code>False</code>. Note that if <code>HUBUUM_SECRET_KEY</code> was set above, this defaults to <code>True</code>, but may be overridden explicitly. </li> </ul>"},{"location":"configuration/#individual-loggers","title":"Individual loggers","text":"<p>These are all loggers for different purposes. TThey default to the level of <code>HUBUUM_LOGGING_LEVEL</code>. They are all prefixed with <code>HUBUUM_LOGGING_LEVEL_</code>.</p> Source Description Events Fields <code>AUTH</code> Authentication events login, logout, failure id <code>API</code> API actions such as direct object manipulation created, deleted, updated id, model, user <code>DJANGO</code> Structlog default Django request loggers request_started, request_finished request, user_agent / request, code <code>INTERNAL</code> Internal events in Hubuum Undefined Any <code>MANUAL</code> Manual log events manual Any <code>MIGRATIONS</code> On startup database migrations, logged at the <code>DEBUG</code> level created id, model <code>REQUESTS</code> Request responses response content, method, run_time_ms, status_code, status_label <code>SIGNALS</code> Other signals, such as object manipulation created, deleted, updated id, model <p>Why both <code>API</code> and <code>SIGNAL</code>? <code>API</code> gives us user information, as it is gathered from the View itself, but this will only log the direct effect of the requested API call. Ie, deleting a Host will be quite similar between the two loggers:</p> <pre><code>2023-05-23T10:56:53.420831Z [info ] deleted [hubuum.api.object] instance=1 model=Host user=tmp\n2023-05-23T10:56:53.422447Z [info ] deleted [hubuum.signals.object] id=1 model=Host\n</code></pre> <p>However, if one deletes a Namespace, which causes a cascade on the items within, it looks quite different:</p> <pre><code>2023-05-23T10:56:53.356191Z [info ] deleted [hubuum.api.object] instance=1 model=Namespace user=superuser\n2023-05-23T10:56:53.363781Z [info ] deleted [hubuum.signals.object] id=1 model=Permission\n2023-05-23T10:56:53.364163Z [info ] deleted [hubuum.signals.object] id=1 model=Host\n2023-05-23T10:56:53.364577Z [info ] deleted [hubuum.signals.object] id=1 model=Namespace\n</code></pre> <p>Here, the <code>API</code> logger only sees the direct effect, the deletion of the Namespace itself, whilst <code>SIGNAL</code> also notifies us about the cascaded objects. To get a quick overview of the logging output, one can run a test with logging set to debug:</p> <pre><code>HUBUUM_LOGGING_LEVEL=DEBUG pytest hubuum/api/v1/tests/test_20_hosts.py -vv -s\n</code></pre>"},{"location":"configuration/#sentry-support","title":"Sentry support","text":"<p>Hubuum supports Sentry for log tracking. See their guide for python for details. The following environment variables can be used to configure Sentry:</p> <ul> <li><code>HUBUUM_SENTRY_DSN</code>: Sets the Sentry DSN for log tracking. Defaults to an empty string. If this is set, Sentry will be enabled.</li> <li><code>HUBUUM_SENTRY_LEVEL</code>: Sets the Sentry logging level. Defaults to <code>ERROR</code>.</li> <li><code>HUBUUM_SENTRY_TRACES_SAMPLE_RATE</code>: Set the sample rate used. This number from 0 (0%) and 1 (100%) of the events passed to sentry. Defaults to <code>1.0</code> (100%).</li> <li><code>HUBUUM_SENTRY_PII</code>: Send personal identifiable information (PII). Default is <code>False</code>.</li> <li><code>HUBUUM_SENTRY_ENVIRONMENT</code>: Set the environment label used, defaults to <code>production</code>.</li> </ul>"},{"location":"configuration/#request-handling","title":"Request handling","text":"<p>Hubuum supports logging slow and very slow requests. This manipulates the events logged by the <code>REQUEST</code> logger.</p> <ul> <li><code>HUBUUM_REQUEST_THRESHOLD_SLOW</code>: The amount of time, in milliseconds, a request can take before it is considered slow. Defaults to <code>1000</code> (1s).</li> <li><code>HUBUUM_REQUEST_THRESHOLD_VERY_SLOW</code>: The amount of time, in milliseconds, a request can take before it is considered very slow. Defaults to <code>5000</code> (5s).</li> <li><code>HUBUUM_REQUEST_LOG_LEVEL_SLOW</code>: The log level a slow request gets escalated to, defaults to <code>WARNING</code>.</li> <li><code>HUBUUM_REQUEST_LOG_LEVEL_VERY_SLOW</code>: The log level a very slow request gets escalated to, defaults to <code>ERROR</code>.</li> </ul> <p>In addition to escalating the <code>log_level</code>, the following fields are added to the event:   - <code>original_log_level</code>: This is the original log level of the event.  - One of <code>slow_response</code> or <code>very_slow_response</code> is set to <code>True</code>.</p> <p>With the default setup, this can look something like this:</p> <pre><code>2023-05-23T11:38:27.353445Z [warning ] response [hubuum.request] content=... method=GET original_log_level=10 path=/api/v1/resources/hosts/ run_time_ms=1438.51 slow_response=True status_code=200 status_label=OK\n2023-05-23T11:38:33.020905Z [error   ] response [hubuum.request] content=... method=GET original_log_level=10 path=/api/v1/resources/hosts/ run_time_ms=5664.79 status_code=200 status_label=OK very_slow_response=True\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#how-to-contribute","title":"How to contribute","text":""},{"location":"contributing/#reporting-bugs","title":"Reporting bugs","text":"<p>If you find a bug in, or have a suggestion for Hubuum, please create an issue on GitHub. Generally speaking it is suggested to create an issue before creating a pull request.</p> <p>Pull Requests are very welcome. For faster turnaround, please see the Pull Request Guidelines below.</p>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, please make sure the following is done:</p> <ol> <li>Fork the repository and create your branch from <code>main</code>.</li> <li>Check that the tests pass and code style is valid by running <code>tox -e format</code> and <code>tox -e flake8</code>.</li> <li>Check that coverage is 100% by running <code>tox -e coverage</code> and then <code>coverage report -m</code>.</li> </ol>"},{"location":"contributing/#local-testing","title":"Local testing","text":"<p>If you have both postgresql and sqlite available locally, you can run the complete test suite by issuing <code>tox</code>. The default environment list is rather large (see <code>tox -l</code>). You can also test against only one of them. Ideally you want to set your \"default\" engine setup by using the same enviroment variables as one uses under production:</p> <ul> <li><code>HUBUUM_DATABASE_ENGINE</code>: Sets the database engine. Defaults to \"django.db.backends.postgresql\".</li> <li><code>HUBUUM_DATABASE_NAME</code>: Sets the name of the database. Defaults to \"hubuum\".</li> <li><code>HUBUUM_DATABASE_USER</code>: Sets the database user. Defaults to \"hubuum\".</li> <li><code>HUBUUM_DATABASE_PASSWORD</code>: Sets the password for the database user. Defaults to <code>None</code>.</li> <li><code>HUBUUM_DATABASE_HOST</code>: Sets the database host. Defaults to \"localhost\".</li> <li><code>HUBUUM_DATABASE_PORT</code>: Sets the port for the database. Defaults to 5432.</li> </ul>"},{"location":"contributing/#postgresql","title":"Postgresql","text":"<p>You MUST specify the following variables for postgresql, even when using tox to ask for a postgresql enviroment (ie, <code>python310-django41-postgres</code>). The database name and engine will however be automatically set.</p> <ul> <li><code>HUBUUM_DATABASE_USER</code> </li> <li><code>HUBUUM_DATABASE_PASSWORD</code> </li> <li><code>HUBUUM_DATABASE_HOST</code> </li> <li><code>HUBUUM_DATABASE_PORT</code> </li> </ul> <p>You can see the available sqlite environments by doing <code>tox -l | grep postgres</code>.</p> <p>You can run the postgresql suite by itself by doing <code>tox -e $( tox -l | grep postgres | tr '\\n' ',' )</code>.</p>"},{"location":"contributing/#sqlite","title":"SQLite","text":"<p>No configuration is required when using Tox and asking for an sqlite environment. The database will be created in <code>{envtmpdir}/hubuum.db</code>, typically something like <code>.tox/python310-django41-sqlite/tmp</code>, and it will be deleted after use. The engine will be automaticall set.</p> <p>You can see the available sqlite environments by doing <code>tox -l | grep sqlite</code>.</p> <p>You can run the SQLite suite by itself by doing <code>tox -e $( tox -l | grep sqlite | tr '\\n' ',' )</code>.</p>"},{"location":"contributing/#coverage","title":"Coverage","text":"<p>Coverage (<code>tox -e coverage &amp;&amp; tox -e report</code>) assumes that the local environment variables are set up to allow for testing. See the sections for postgresql and SQLite above.</p>"},{"location":"examples/","title":"Examples of using the hubuum API","text":"<pre><code># Get the user with the username \"admin\" (it is unique)\nGET /api/v1/users/?username=admin\n\n# Get hosts that end with \"example.tld\" in FQDN\nGET /api/v1/hosts/?fqdn__endswith=example.tld\n\n# Get extensions that have json_data with a key \"foo\" and value \"bar\"\nGET /api/v1/extensions/?json_data_lookup__foo=bar\n\n# Get extensions that apply to a host that has json_data with a key \"foo\",\n# with a subkey \"bar\", and has a value that contains \"baz\"\nGET /api/v1/extensions/?content_type=host&amp;json_data_lookup__foo__bar__icontains=baz\n</code></pre> <p>Warning</p> <p>You always want to use case-insensitive operators for JSON fields. Otherwise, you will get unexpected (ie, no) results.</p>"},{"location":"extensions/","title":"Extensions","text":""},{"location":"extensions/#overview","title":"Overview","text":"<p>Hubuum supports <code>extensions</code> to extend basic storage functionality of object models. Each extension applies to a specific model, and objects of that model will then have the option to have associated data from the extension applied to them.</p> <p>The only currently supported extension type is to retrieve data from a REST endpoint and store it as JSON for the object in question. An extension has the following properties:</p> <ul> <li><code>name</code>: The name of the extension. This is a globally unique identifier for the extension.</li> <li><code>content_type</code>: The model that the extension applies to.</li> <li><code>url</code>: The URL endpoint that the extensions uses to fetch data. Supports interpolation fields.</li> <li><code>require_interpolation</code> (optional): If set to true, the URL has to have at least one interpolation field.</li> <li><code>header</code> (optional): A header to send with the request. This is a formatted HTTP header string. Typically used to pass authentication information.</li> <li><code>cache_time</code> (optional, defaults to 60s): The time in seconds to cache the response from the endpoint.</li> </ul>"},{"location":"extensions/#interpolation-fields","title":"Interpolation fields","text":"<p>A url may take interpolation fields on the form of <code>{fieldname}</code> where the fieldname is a field on the object. For example, if the URL is <code>http://example.com/users/{username}/</code>, and the object has a field <code>username</code> with the value <code>admin</code>, the URL will be interpolated to <code>http://example.com/users/admin/</code> for that object. If you do not require interpolation, you can set <code>require_interpolation</code> to false and the URL will be used as-is.</p>"},{"location":"extensions/#populating-the-data-for-an-object","title":"Populating the data for an object","text":"<p>There is currently no automatic population of an objects extension data. This also implies that the cache_data field is unused. There is an issue on how to do this gracefully: https://github.com/terjekv/hubuum/issues/69</p>"},{"location":"extensions/#example-usage","title":"Example usage","text":""},{"location":"extensions/#register-a-new-extension","title":"Register a new extension","text":"<pre><code># Assume we have a host in the database with the FQDN test.example.tld, and ID=1\n# This host resides in the namespace with ID=1\n\n# Create a new extension\nPOST /api/v1/extensions/ -d '{\n    \"name\": \"example\",\n    \"content_type\": \"host\",\n    \"url\": \"https://example.tld/hostname/{fqdn}/\",\n    \"header\": \"Authorization: Bearer sh...==\"\n}'\n# We assume this gives is the ID for the extension as '1'\n\n# Populate data for the host test.example.tld\n# Assume that the endpoint returns the following JSON:\n# { \"foo\": \"bar\" }\ndata=$( curl -X GET \\\n-H \"Content-type: application/json\" \\\n-H \"Accept: application/json\" \\\n\"https://example.tld/hostname/test.example.tld\" )\n\n# Add the data to the object\n# Note that the namespace and extension IDs are used, not their names\n# The object ID is the ID of the host\nPOST /api/v1/extension_data/ -d \"{\n    'namespace': 1,\n    'extension': 1,\n    'content_type': 'host',\n    'object_id': 1,\n    'json_data': ${data}\n}\"\n\n# We can now search for the data using the extension API. Note that we do not\n# limit this search to any specific namespace or extension id.\nGET /api/v1/extension_data/?content_type=host&amp;json_data_lookup__foo=bar\n\n# This should return at least one hit, an extension data with our object:\n{\n\"id\": 1,\n    \"namespace\": 1,\n    \"extension\": 1,\n    \"content_type\": \"host\",\n    \"object_id\": 1,\n    \"json_data\": {\n\"foo\": \"bar\"\n}\n}\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>Note</p> <p>Hubuum is a work in progress and is not ready for production use.</p> <p>Currently there are no releases, so...</p> <pre><code>$ git clone git@github.com:terjekv/hubuum.git\n$ cd hubuum\n$ python -m venv venv\n$ source venv/bin/activate\n$ pip install -r requirements.txt\n$ python manage.py runserver\n</code></pre> <p>If you want to work on development for Hubuum, you can install the additional development requirements:</p> <pre><code>$ pip install -r requirements-dev.txt\n</code></pre>"},{"location":"logging/","title":"Logging","text":""},{"location":"logging/#standard-logging","title":"Standard Logging","text":"<p>By default, Hubuum logs to the console. This is the recommended way to run Hubuum in production, as per the 12-factor app methodology.</p> <p>To control the logging level, set the <code>HUBUUM_LOGGING_LEVEL</code> environment variable to one of the following values:</p> <ul> <li><code>critical</code></li> <li><code>error</code></li> <li><code>warning</code></li> <li><code>info</code></li> <li><code>debug</code></li> </ul> <p>One may also set the logging level for specific sources. The following environment variables are available:</p> <ul> <li><code>HUBUUM_LOGGING_LEVEL_DJANGO</code>: Sets the logging level for Django. Defaults to the value of <code>HUBUUM_LOGGING_LEVEL</code>.</li> <li><code>HUBUUM_LOGGING_LEVEL_API</code>: Sets the logging level for the API. Defaults to the value of <code>HUBUUM_LOGGING_LEVEL</code>.</li> <li><code>HUBUUM_LOGGING_LEVEL_SIGNALS</code>: Sets the logging level for signals. Defaults to the value of <code>HUBUUM_LOGGING_LEVEL</code>.</li> <li><code>HUBUUM_LOGGING_LEVEL_REQUEST</code>: Sets the logging level for requests. Defaults to the value of <code>HUBUUM_LOGGING_LEVEL</code>.</li> <li><code>HUBUUM_LOGGING_LEVEL_MANUAL</code>: Sets the logging level for manual logs. Defaults to the value of <code>HUBUUM_LOGGING_LEVEL</code>.</li> <li><code>HUBUUM_LOGGING_LEVEL_AUTH</code>: Sets the logging level for authentication. Defaults to the value of <code>HUBUUM_LOGGING_LEVEL</code>.</li> </ul>"},{"location":"logging/#sentry","title":"Sentry","text":"<p>Hubuum can be configured to send logs to Sentry. To do this, set the <code>SENTRY_DSN</code> environment variable to the DSN for your Sentry project.</p>"},{"location":"logging/#development","title":"Development","text":"<p>During development, hubuum produces colored output. To disable this, set the <code>HUBUUM_LOGGING_PRODUCTION</code> environment variable to <code>True</code>.</p>"},{"location":"model/","title":"References","text":""},{"location":"model/#core-models","title":"Core models","text":"<p>Core models for hubuum. These are the foundation that permissions and resources are built on.</p> <p>Core models for hubuum.</p>"},{"location":"model/#hubuum.models.core.Attachment","title":"<code>Attachment</code>","text":"<p>         Bases: <code>NamespacedHubuumModel</code></p> <p>A model for the attachments data for objects.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class Attachment(NamespacedHubuumModel):\n\"\"\"A model for the attachments data for objects.\"\"\"\n\n    attachment = models.FileField(unique=True)\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey(\"content_type\", \"object_id\")\n    sha256 = models.CharField(max_length=64, unique=True, editable=False)\n    size = models.PositiveIntegerField(editable=False)\n    original_filename = models.CharField(max_length=255, editable=False)\n\n    class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n        ordering = [\"id\"]\n\n    def generate_sha256_filename(self, sha256_hash: str):\n\"\"\"Generate a custom filename for the uploaded file using its sha256 hash.\"\"\"\n        return f\"attachments/file/{sha256_hash}\"\n\n    def save(self, *args: Any, **kwargs: Any) -&gt; None:\n\"\"\"Override the save method to compute the sha256 hash and size of the uploaded file.\"\"\"\n        file_contents = self.attachment.read()\n        self.sha256 = hashlib.sha256(file_contents).hexdigest()\n        self.size = self.attachment.size\n        self.original_filename = self.attachment.name\n        self.attachment.name = self.generate_sha256_filename(self.sha256)\n        super().save(*args, **kwargs)\n\n    def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n        return str(self.get_auto_id())\n</code></pre>"},{"location":"model/#hubuum.models.core.Attachment.Meta","title":"<code>Meta</code>","text":"<p>Meta for the model.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n    ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.core.Attachment.__str__","title":"<code>__str__()</code>","text":"<p>Stringify the object, used to represent the object towards users.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n    return str(self.get_auto_id())\n</code></pre>"},{"location":"model/#hubuum.models.core.Attachment.generate_sha256_filename","title":"<code>generate_sha256_filename(sha256_hash)</code>","text":"<p>Generate a custom filename for the uploaded file using its sha256 hash.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def generate_sha256_filename(self, sha256_hash: str):\n\"\"\"Generate a custom filename for the uploaded file using its sha256 hash.\"\"\"\n    return f\"attachments/file/{sha256_hash}\"\n</code></pre>"},{"location":"model/#hubuum.models.core.Attachment.save","title":"<code>save(*args, **kwargs)</code>","text":"<p>Override the save method to compute the sha256 hash and size of the uploaded file.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def save(self, *args: Any, **kwargs: Any) -&gt; None:\n\"\"\"Override the save method to compute the sha256 hash and size of the uploaded file.\"\"\"\n    file_contents = self.attachment.read()\n    self.sha256 = hashlib.sha256(file_contents).hexdigest()\n    self.size = self.attachment.size\n    self.original_filename = self.attachment.name\n    self.attachment.name = self.generate_sha256_filename(self.sha256)\n    super().save(*args, **kwargs)\n</code></pre>"},{"location":"model/#hubuum.models.core.AttachmentManager","title":"<code>AttachmentManager</code>","text":"<p>         Bases: <code>HubuumModel</code></p> <p>A model for attachments to objects.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class AttachmentManager(HubuumModel):\n\"\"\"A model for attachments to objects.\"\"\"\n\n    model: str = models.CharField(\n        max_length=255,\n        null=False,\n        validators=[validate_model_can_have_attachments],\n        unique=True,\n    )\n    enabled = models.BooleanField(default=False, null=False)\n    per_object_count_limit = models.PositiveIntegerField(default=0, null=False)\n    per_object_individual_size_limit = models.PositiveIntegerField(\n        default=0, null=False\n    )\n    per_object_total_size_limit = models.PositiveIntegerField(default=0, null=False)\n\n    class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n        ordering = [\"id\"]\n\n    def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n        return str(self.get_auto_id())\n</code></pre>"},{"location":"model/#hubuum.models.core.AttachmentManager.Meta","title":"<code>Meta</code>","text":"<p>Meta for the model.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n    ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.core.AttachmentManager.__str__","title":"<code>__str__()</code>","text":"<p>Stringify the object, used to represent the object towards users.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n    return str(self.get_auto_id())\n</code></pre>"},{"location":"model/#hubuum.models.core.AttachmentModel","title":"<code>AttachmentModel</code>","text":"<p>         Bases: <code>models.Model</code></p> <p>A model that supports attachments.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class AttachmentModel(models.Model):\n\"\"\"A model that supports attachments.\"\"\"\n\n    attachment_data_objects = GenericRelation(\n        Attachment, related_query_name=\"att_objects\"\n    )\n\n    class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n        abstract = True\n\n    def attachments_are_enabled(self) -&gt; bool:\n\"\"\"Check if the model is ready to receive attachments.\"\"\"\n        return AttachmentManager.objects.filter(\n            model=self.__class__.__name__.lower(), enabled=True\n        ).exists()\n\n    def attachments(self) -&gt; List[Attachment]:\n\"\"\"List all attachments registered to the object.\"\"\"\n        return self.attachment_data_objects.all()\n\n    def attachment_count(self) -&gt; int:\n\"\"\"Return the number of attachments registered to the object.\"\"\"\n        return self.attachment_data_objects.count()\n\n    def attachment_size(self) -&gt; int:\n\"\"\"Return the total size of all attachments registered to the object.\"\"\"\n        return sum(attachment.size for attachment in self.attachments())\n\n    def attachment_individual_size_limit(self) -&gt; int:\n\"\"\"Return the max size of an attachment for the object.\"\"\"\n        return AttachmentManager.objects.get(\n            model=self.__class__.__name__.lower(), enabled=True\n        ).per_object_individual_size_limit\n\n    def attachment_total_size_limit(self) -&gt; int:\n\"\"\"Return the size limit of attachments for the object.\"\"\"\n        return AttachmentManager.objects.get(\n            model=self.__class__.__name__.lower(), enabled=True\n        ).per_object_total_size_limit\n\n    def attachment_count_limit(self) -&gt; int:\n\"\"\"Return the count limit of attachments for the object.\"\"\"\n        return AttachmentManager.objects.get(\n            model=self.__class__.__name__.lower(), enabled=True\n        ).per_object_count_limit\n</code></pre>"},{"location":"model/#hubuum.models.core.AttachmentModel.Meta","title":"<code>Meta</code>","text":"<p>Meta for the model.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n    abstract = True\n</code></pre>"},{"location":"model/#hubuum.models.core.AttachmentModel.attachment_count","title":"<code>attachment_count()</code>","text":"<p>Return the number of attachments registered to the object.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def attachment_count(self) -&gt; int:\n\"\"\"Return the number of attachments registered to the object.\"\"\"\n    return self.attachment_data_objects.count()\n</code></pre>"},{"location":"model/#hubuum.models.core.AttachmentModel.attachment_count_limit","title":"<code>attachment_count_limit()</code>","text":"<p>Return the count limit of attachments for the object.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def attachment_count_limit(self) -&gt; int:\n\"\"\"Return the count limit of attachments for the object.\"\"\"\n    return AttachmentManager.objects.get(\n        model=self.__class__.__name__.lower(), enabled=True\n    ).per_object_count_limit\n</code></pre>"},{"location":"model/#hubuum.models.core.AttachmentModel.attachment_individual_size_limit","title":"<code>attachment_individual_size_limit()</code>","text":"<p>Return the max size of an attachment for the object.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def attachment_individual_size_limit(self) -&gt; int:\n\"\"\"Return the max size of an attachment for the object.\"\"\"\n    return AttachmentManager.objects.get(\n        model=self.__class__.__name__.lower(), enabled=True\n    ).per_object_individual_size_limit\n</code></pre>"},{"location":"model/#hubuum.models.core.AttachmentModel.attachment_size","title":"<code>attachment_size()</code>","text":"<p>Return the total size of all attachments registered to the object.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def attachment_size(self) -&gt; int:\n\"\"\"Return the total size of all attachments registered to the object.\"\"\"\n    return sum(attachment.size for attachment in self.attachments())\n</code></pre>"},{"location":"model/#hubuum.models.core.AttachmentModel.attachment_total_size_limit","title":"<code>attachment_total_size_limit()</code>","text":"<p>Return the size limit of attachments for the object.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def attachment_total_size_limit(self) -&gt; int:\n\"\"\"Return the size limit of attachments for the object.\"\"\"\n    return AttachmentManager.objects.get(\n        model=self.__class__.__name__.lower(), enabled=True\n    ).per_object_total_size_limit\n</code></pre>"},{"location":"model/#hubuum.models.core.AttachmentModel.attachments","title":"<code>attachments()</code>","text":"<p>List all attachments registered to the object.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def attachments(self) -&gt; List[Attachment]:\n\"\"\"List all attachments registered to the object.\"\"\"\n    return self.attachment_data_objects.all()\n</code></pre>"},{"location":"model/#hubuum.models.core.AttachmentModel.attachments_are_enabled","title":"<code>attachments_are_enabled()</code>","text":"<p>Check if the model is ready to receive attachments.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def attachments_are_enabled(self) -&gt; bool:\n\"\"\"Check if the model is ready to receive attachments.\"\"\"\n    return AttachmentManager.objects.filter(\n        model=self.__class__.__name__.lower(), enabled=True\n    ).exists()\n</code></pre>"},{"location":"model/#hubuum.models.core.Extension","title":"<code>Extension</code>","text":"<p>         Bases: <code>NamespacedHubuumModel</code></p> <p>An extension to a specific model.</p> <p>For now, it is implied that the extension uses REST.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class Extension(NamespacedHubuumModel):\n\"\"\"An extension to a specific model.\n\n    For now, it is implied that the extension uses REST.\n    \"\"\"\n\n    name: str = models.CharField(max_length=255, null=False, unique=True)\n    model: str = models.CharField(\n        max_length=255, null=False, validators=[validate_model_can_have_extensions]\n    )\n    url: str = models.CharField(max_length=255, null=False, validators=[validate_url])\n    require_interpolation: bool = models.BooleanField(default=True, null=False)\n    header: str = models.CharField(max_length=512)\n    cache_time: int = models.PositiveSmallIntegerField(default=60)\n\n    class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n        ordering = [\"id\"]\n\n    def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n        return self.name\n</code></pre>"},{"location":"model/#hubuum.models.core.Extension.Meta","title":"<code>Meta</code>","text":"<p>Meta for the model.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n    ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.core.Extension.__str__","title":"<code>__str__()</code>","text":"<p>Stringify the object, used to represent the object towards users.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n    return self.name\n</code></pre>"},{"location":"model/#hubuum.models.core.ExtensionData","title":"<code>ExtensionData</code>","text":"<p>         Bases: <code>NamespacedHubuumModel</code></p> <p>A model for the extensions data for objects.</p> <p>Note that the object_id refers to an object of the appropriate model. https://docs.djangoproject.com/en/4.1/ref/contrib/contenttypes/#generic-relations</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class ExtensionData(NamespacedHubuumModel):\n\"\"\"A model for the extensions data for objects.\n\n    Note that the object_id refers to an object of the appropriate model.\n    https://docs.djangoproject.com/en/4.1/ref/contrib/contenttypes/#generic-relations\n    \"\"\"\n\n    extension: int = models.ForeignKey(\n        \"Extension\", on_delete=models.CASCADE, null=False\n    )\n\n    content_type: int = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id: int = models.PositiveIntegerField()\n    content_object = GenericForeignKey(\"content_type\", \"object_id\")\n\n    json_data = models.JSONField(null=True)\n\n    class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n        unique_together = (\"extension\", \"content_type\", \"object_id\")\n        ordering = [\"id\"]\n\n    def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n        return str(self.get_auto_id())\n</code></pre>"},{"location":"model/#hubuum.models.core.ExtensionData.Meta","title":"<code>Meta</code>","text":"<p>Meta for the model.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n    unique_together = (\"extension\", \"content_type\", \"object_id\")\n    ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.core.ExtensionData.__str__","title":"<code>__str__()</code>","text":"<p>Stringify the object, used to represent the object towards users.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n    return str(self.get_auto_id())\n</code></pre>"},{"location":"model/#hubuum.models.core.ExtensionsModel","title":"<code>ExtensionsModel</code>","text":"<p>         Bases: <code>models.Model</code></p> <p>A model that supports extensions.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class ExtensionsModel(models.Model):\n\"\"\"A model that supports extensions.\"\"\"\n\n    extension_data_objects = GenericRelation(\n        ExtensionData, related_query_name=\"ext_objects\"\n    )\n\n    class Meta:\n\"\"\"Meta data for the class.\"\"\"\n\n        abstract = True\n\n    def extensions(self) -&gt; List[Extension]:\n\"\"\"List all extensions registered for the object.\"\"\"\n        model = self.__class__.__name__.lower()\n        return Extension.objects.filter(model=model).order_by(\"name\")\n\n    def extension_data(self) -&gt; Dict[str, Any]:\n\"\"\"Return the data for each extension the object has.\"\"\"\n        extension_data: Dict[str, Any] = {}\n\n        for extension in self.extensions():\n            extension_data[extension.name] = None\n\n        for extension_data_obj in self.extension_data_objects.all():\n            extension_data[\n                extension_data_obj.extension.name\n            ] = extension_data_obj.json_data\n\n        return extension_data\n\n    def extension_urls(self) -&gt; Dict[str, str]:\n\"\"\"Return the URLs for each extension the object has.\"\"\"\n        url_map: Dict[str, str] = {}\n        for extension in self.extensions():\n            url_map[extension.name] = self.interpolate(extension.url)\n\n        return url_map\n\n    def interpolate(self, string: str) -&gt; str:\n\"\"\"Interpolate fields within {} to the values of those fields.\"\"\"\n\n        def _get_value_from_match(matchobj: Match[str]) -&gt; str:\n\"\"\"Interpolate the match object.\"\"\"\n            return getattr(self, matchobj.group(1))\n\n        return re.sub(url_interpolation_regexp, _get_value_from_match, string)\n</code></pre>"},{"location":"model/#hubuum.models.core.ExtensionsModel.Meta","title":"<code>Meta</code>","text":"<p>Meta data for the class.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class Meta:\n\"\"\"Meta data for the class.\"\"\"\n\n    abstract = True\n</code></pre>"},{"location":"model/#hubuum.models.core.ExtensionsModel.extension_data","title":"<code>extension_data()</code>","text":"<p>Return the data for each extension the object has.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def extension_data(self) -&gt; Dict[str, Any]:\n\"\"\"Return the data for each extension the object has.\"\"\"\n    extension_data: Dict[str, Any] = {}\n\n    for extension in self.extensions():\n        extension_data[extension.name] = None\n\n    for extension_data_obj in self.extension_data_objects.all():\n        extension_data[\n            extension_data_obj.extension.name\n        ] = extension_data_obj.json_data\n\n    return extension_data\n</code></pre>"},{"location":"model/#hubuum.models.core.ExtensionsModel.extension_urls","title":"<code>extension_urls()</code>","text":"<p>Return the URLs for each extension the object has.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def extension_urls(self) -&gt; Dict[str, str]:\n\"\"\"Return the URLs for each extension the object has.\"\"\"\n    url_map: Dict[str, str] = {}\n    for extension in self.extensions():\n        url_map[extension.name] = self.interpolate(extension.url)\n\n    return url_map\n</code></pre>"},{"location":"model/#hubuum.models.core.ExtensionsModel.extensions","title":"<code>extensions()</code>","text":"<p>List all extensions registered for the object.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def extensions(self) -&gt; List[Extension]:\n\"\"\"List all extensions registered for the object.\"\"\"\n    model = self.__class__.__name__.lower()\n    return Extension.objects.filter(model=model).order_by(\"name\")\n</code></pre>"},{"location":"model/#hubuum.models.core.ExtensionsModel.interpolate","title":"<code>interpolate(string)</code>","text":"<p>Interpolate fields within {} to the values of those fields.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def interpolate(self, string: str) -&gt; str:\n\"\"\"Interpolate fields within {} to the values of those fields.\"\"\"\n\n    def _get_value_from_match(matchobj: Match[str]) -&gt; str:\n\"\"\"Interpolate the match object.\"\"\"\n        return getattr(self, matchobj.group(1))\n\n    return re.sub(url_interpolation_regexp, _get_value_from_match, string)\n</code></pre>"},{"location":"model/#hubuum.models.core.HubuumModel","title":"<code>HubuumModel</code>","text":"<p>         Bases: <code>models.Model</code></p> <p>Base model for Hubuum Objects.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class HubuumModel(models.Model):\n\"\"\"Base model for Hubuum Objects.\"\"\"\n\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    readonly_fields = (\n        \"created_at\",\n        \"updated_at\",\n    )\n\n    class Meta:\n\"\"\"Meta data for the class.\"\"\"\n\n        abstract = True\n\n    @classmethod\n    def supports_extensions(cls) -&gt; bool:\n\"\"\"Check if a class supports extensions.\"\"\"\n        return issubclass(cls, ExtensionsModel)\n\n    @classmethod\n    def supports_attachments(cls) -&gt; bool:\n\"\"\"Check if a class supports attachments.\"\"\"\n        return issubclass(cls, AttachmentModel)\n\n    def get_auto_id(self) -&gt; int:\n\"\"\"Get the auto ID of the object.\"\"\"\n        return cast(int, self.id)\n</code></pre>"},{"location":"model/#hubuum.models.core.HubuumModel.Meta","title":"<code>Meta</code>","text":"<p>Meta data for the class.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class Meta:\n\"\"\"Meta data for the class.\"\"\"\n\n    abstract = True\n</code></pre>"},{"location":"model/#hubuum.models.core.HubuumModel.get_auto_id","title":"<code>get_auto_id()</code>","text":"<p>Get the auto ID of the object.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def get_auto_id(self) -&gt; int:\n\"\"\"Get the auto ID of the object.\"\"\"\n    return cast(int, self.id)\n</code></pre>"},{"location":"model/#hubuum.models.core.HubuumModel.supports_attachments","title":"<code>supports_attachments()</code>  <code>classmethod</code>","text":"<p>Check if a class supports attachments.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>@classmethod\ndef supports_attachments(cls) -&gt; bool:\n\"\"\"Check if a class supports attachments.\"\"\"\n    return issubclass(cls, AttachmentModel)\n</code></pre>"},{"location":"model/#hubuum.models.core.HubuumModel.supports_extensions","title":"<code>supports_extensions()</code>  <code>classmethod</code>","text":"<p>Check if a class supports extensions.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>@classmethod\ndef supports_extensions(cls) -&gt; bool:\n\"\"\"Check if a class supports extensions.\"\"\"\n    return issubclass(cls, ExtensionsModel)\n</code></pre>"},{"location":"model/#hubuum.models.core.NamespacedHubuumModel","title":"<code>NamespacedHubuumModel</code>","text":"<p>         Bases: <code>HubuumModel</code></p> <p>Base model for a namespaced Hubuum Objects.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class NamespacedHubuumModel(HubuumModel):\n\"\"\"Base model for a namespaced Hubuum Objects.\"\"\"\n\n    # When we delete a namespace, do we want *all* the objects to disappear?\n    # That'd be harsh. But, well... What is the realistic option?\n    namespace: int = models.ForeignKey(\n        \"Namespace\",\n        on_delete=models.CASCADE,\n        blank=False,\n        null=False,\n    )\n\n    class Meta:\n\"\"\"Meta data for the class.\"\"\"\n\n        abstract = True\n</code></pre>"},{"location":"model/#hubuum.models.core.NamespacedHubuumModel.Meta","title":"<code>Meta</code>","text":"<p>Meta data for the class.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>class Meta:\n\"\"\"Meta data for the class.\"\"\"\n\n    abstract = True\n</code></pre>"},{"location":"model/#hubuum.models.core.model_is_open","title":"<code>model_is_open(model)</code>","text":"<p>Check if the model is an open model.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def model_is_open(model: str) -&gt; bool:\n\"\"\"Check if the model is an open model.\"\"\"\n    return model in models_that_are_open()\n</code></pre>"},{"location":"model/#hubuum.models.core.model_supports_attachments","title":"<code>model_supports_attachments(model)</code>","text":"<p>Check if a model supports attachments.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def model_supports_attachments(model: Union[str, models.Model]) -&gt; bool:\n\"\"\"Check if a model supports attachments.\"\"\"\n    if isinstance(model, str):\n        model = get_model(model)\n\n    return issubclass(model, AttachmentModel)\n</code></pre>"},{"location":"model/#hubuum.models.core.model_supports_extensions","title":"<code>model_supports_extensions(model)</code>","text":"<p>Check if a model supports extensions.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def model_supports_extensions(model: Union[str, models.Model]) -&gt; bool:\n\"\"\"Check if a model supports extensions.\"\"\"\n    if isinstance(model, str):\n        model = get_model(model)\n\n    return issubclass(model, ExtensionsModel)\n</code></pre>"},{"location":"model/#hubuum.models.core.models_that_are_open","title":"<code>models_that_are_open()</code>","text":"<p>Return a list of models open to all authenticated users.</p> Source code in <code>hubuum/models/core.py</code> <pre><code>def models_that_are_open() -&gt; Tuple[str]:\n\"\"\"Return a list of models open to all authenticated users.\"\"\"\n    return (\"user\", \"group\")\n</code></pre>"},{"location":"model/#iam","title":"IAM","text":"<p>Models related to the identity management and permissions.</p> <p>IAM-related models for the hubuum project.</p>"},{"location":"model/#hubuum.models.iam.Namespace","title":"<code>Namespace</code>","text":"<p>         Bases: <code>HubuumModel</code></p> <p>The namespace ('domain') of an object.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>class Namespace(HubuumModel):\n\"\"\"The namespace ('domain') of an object.\"\"\"\n\n    name = models.CharField(max_length=255, unique=True)\n    description = models.TextField(blank=True)\n\n    def get_permissions_for_group(\n        self, group: Group, raise_exception: bool = True\n    ) -&gt; Permission:\n\"\"\"Try to find a permission object for the given group.\n\n        param: group (Group instance)\n        param: raise_exception (True)\n\n        Returns\n        -------\n            success (Permission): Permission object\n            failure (None): None\n\n        Raises\n        ------\n            exception: NotFound if raise_exception is True and no permission object is found\n        \"\"\"\n        try:\n            obj = Permission.objects.get(namespace=self, group=group)\n            return obj\n        except Permission.DoesNotExist as exc:\n            if raise_exception:\n                raise NotFound() from exc\n\n        return None\n\n    def grant_all(self, group: Group) -&gt; bool:\n\"\"\"Grant all permissions to the namespace to the given group.\"\"\"\n        create = {}\n        create[\"namespace\"] = self\n        create[\"group\"] = group\n        for perm in namespace_operations(fully_qualified=True):\n            create[perm] = True\n        Permission.objects.update_or_create(**create)\n        return True\n\n    def groups_that_can(self, perm: str) -&gt; List[Group]:\n\"\"\"Fetch groups that can perform a specific permission.\n\n        param: perm (permission string, 'has_[read|create|update|delete|namespace])\n        return [group objects] (may be empty)\n        \"\"\"\n        qs = Permission.objects.filter(namespace=self.id, **{perm: True}).values(\n            \"group\"\n        )\n        groups = Group.objects.filter(id__in=qs)\n        return groups\n\n    class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n        ordering = [\"id\"]\n\n    def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n        return self.name\n</code></pre>"},{"location":"model/#hubuum.models.iam.Namespace.Meta","title":"<code>Meta</code>","text":"<p>Meta for the model.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n    ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.iam.Namespace.__str__","title":"<code>__str__()</code>","text":"<p>Stringify the object, used to represent the object towards users.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n    return self.name\n</code></pre>"},{"location":"model/#hubuum.models.iam.Namespace.get_permissions_for_group","title":"<code>get_permissions_for_group(group, raise_exception=True)</code>","text":"<p>Try to find a permission object for the given group.</p> <p>param: group (Group instance) param: raise_exception (True)</p>"},{"location":"model/#hubuum.models.iam.Namespace.get_permissions_for_group--returns","title":"Returns","text":"<pre><code>success (Permission): Permission object\nfailure (None): None\n</code></pre>"},{"location":"model/#hubuum.models.iam.Namespace.get_permissions_for_group--raises","title":"Raises","text":"<pre><code>exception: NotFound if raise_exception is True and no permission object is found\n</code></pre> Source code in <code>hubuum/models/iam.py</code> <pre><code>def get_permissions_for_group(\n    self, group: Group, raise_exception: bool = True\n) -&gt; Permission:\n\"\"\"Try to find a permission object for the given group.\n\n    param: group (Group instance)\n    param: raise_exception (True)\n\n    Returns\n    -------\n        success (Permission): Permission object\n        failure (None): None\n\n    Raises\n    ------\n        exception: NotFound if raise_exception is True and no permission object is found\n    \"\"\"\n    try:\n        obj = Permission.objects.get(namespace=self, group=group)\n        return obj\n    except Permission.DoesNotExist as exc:\n        if raise_exception:\n            raise NotFound() from exc\n\n    return None\n</code></pre>"},{"location":"model/#hubuum.models.iam.Namespace.grant_all","title":"<code>grant_all(group)</code>","text":"<p>Grant all permissions to the namespace to the given group.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def grant_all(self, group: Group) -&gt; bool:\n\"\"\"Grant all permissions to the namespace to the given group.\"\"\"\n    create = {}\n    create[\"namespace\"] = self\n    create[\"group\"] = group\n    for perm in namespace_operations(fully_qualified=True):\n        create[perm] = True\n    Permission.objects.update_or_create(**create)\n    return True\n</code></pre>"},{"location":"model/#hubuum.models.iam.Namespace.groups_that_can","title":"<code>groups_that_can(perm)</code>","text":"<p>Fetch groups that can perform a specific permission.</p> <p>param: perm (permission string, 'has_[read|create|update|delete|namespace]) return [group objects] (may be empty)</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def groups_that_can(self, perm: str) -&gt; List[Group]:\n\"\"\"Fetch groups that can perform a specific permission.\n\n    param: perm (permission string, 'has_[read|create|update|delete|namespace])\n    return [group objects] (may be empty)\n    \"\"\"\n    qs = Permission.objects.filter(namespace=self.id, **{perm: True}).values(\n        \"group\"\n    )\n    groups = Group.objects.filter(id__in=qs)\n    return groups\n</code></pre>"},{"location":"model/#hubuum.models.iam.NamespacedHubuumModelWithExtensions","title":"<code>NamespacedHubuumModelWithExtensions</code>","text":"<p>         Bases: <code>NamespacedHubuumModel</code>, <code>AttachmentModel</code>, <code>ExtensionsModel</code></p> <p>An abstract model that provides Namespaces and Extensions.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>class NamespacedHubuumModelWithExtensions(\n    NamespacedHubuumModel, AttachmentModel, ExtensionsModel\n):\n\"\"\"An abstract model that provides Namespaces and Extensions.\"\"\"\n\n    class Meta:\n\"\"\"Meta data for the class.\"\"\"\n\n        abstract = True\n</code></pre>"},{"location":"model/#hubuum.models.iam.NamespacedHubuumModelWithExtensions.Meta","title":"<code>Meta</code>","text":"<p>Meta data for the class.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>class Meta:\n\"\"\"Meta data for the class.\"\"\"\n\n    abstract = True\n</code></pre>"},{"location":"model/#hubuum.models.iam.Permission","title":"<code>Permission</code>","text":"<p>         Bases: <code>HubuumModel</code></p> <p>Permissions in Hubuum.</p> <ul> <li>Permissions are set by group.</li> <li>Objects belong to a namespace.</li> <li>Every namespace has zero or more groups with permissions for the namespace.</li> </ul> <p>The permission <code>has_namespace</code> allows for the group to create new namespaces scoped under the current one.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>class Permission(HubuumModel):\n\"\"\"Permissions in Hubuum.\n\n    - Permissions are set by group.\n    - Objects belong to a namespace.\n    - Every namespace has zero or more groups with permissions for the namespace.\n\n    The permission `has_namespace` allows for the group to create new namespaces scoped\n    under the current one.\n    \"\"\"\n\n    # If the namespace the permission points to goes away, clear the entry.\n    namespace: int = models.ForeignKey(\n        \"Namespace\", related_name=\"p_namespace\", on_delete=models.CASCADE\n    )\n    # If the group the permission uses goes away, clear the entry.\n    group: int = models.ForeignKey(\n        \"auth.Group\", related_name=\"p_group\", on_delete=models.CASCADE\n    )\n\n    has_create = models.BooleanField(null=False, default=False)\n    has_read = models.BooleanField(null=False, default=False)\n    has_update = models.BooleanField(null=False, default=False)\n    has_delete = models.BooleanField(null=False, default=False)\n    has_namespace = models.BooleanField(null=False, default=False)\n\n    class Meta:\n\"\"\"Metadata permissions.\"\"\"\n\n        unique_together = (\"namespace\", \"group\")\n        ordering = [\"id\"]\n\n    def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n        return str(self.get_auto_id())\n</code></pre>"},{"location":"model/#hubuum.models.iam.Permission.Meta","title":"<code>Meta</code>","text":"<p>Metadata permissions.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>class Meta:\n\"\"\"Metadata permissions.\"\"\"\n\n    unique_together = (\"namespace\", \"group\")\n    ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.iam.Permission.__str__","title":"<code>__str__()</code>","text":"<p>Stringify the object, used to represent the object towards users.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n    return str(self.get_auto_id())\n</code></pre>"},{"location":"model/#hubuum.models.iam.User","title":"<code>User</code>","text":"<p>         Bases: <code>AbstractUser</code></p> <p>Extension to the default User class.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>class User(AbstractUser):\n\"\"\"Extension to the default User class.\"\"\"\n\n    model_permissions_pattern = re.compile(\n        r\"^hubuum.(create|read|update|delete|namespace)_(\\w+)$\"\n    )\n    lookup_fields = [\"id\", \"username\", \"email\"]\n\n    _group_list = None\n\n    def get_auto_id(self) -&gt; int:\n\"\"\"Return the auto id of the user.\"\"\"\n        return cast(int, self.id)\n\n    def is_admin(self):\n\"\"\"Check if the user is any type of admin (staff/superadmin) (or in a similar group?).\"\"\"\n        return self.is_staff or self.is_superuser\n\n    @classmethod\n    def supports_extensions(cls) -&gt; bool:\n\"\"\"Check if a class supports extensions.\"\"\"\n        return False\n\n    @classmethod\n    def supports_attachments(cls) -&gt; bool:\n\"\"\"Check if a class supports attachments.\"\"\"\n        return False\n\n    @property\n    def group_list(self) -&gt; List[str]:\n\"\"\"List the names of all the groups the user is a member of.\"\"\"\n        if self._group_list is None:\n            self._group_list = list(self.groups.values_list(\"name\", flat=True))\n        return self._group_list\n\n    def group_count(self) -&gt; int:\n\"\"\"Return the number of groups the user is a member of.\"\"\"\n        return self.groups.count()\n\n    def has_only_one_group(self) -&gt; bool:\n\"\"\"Return true if the user is a member of only one group.\"\"\"\n        return self.group_count() == 1\n\n    def is_member_of(self, group: Group) -&gt; bool:\n\"\"\"Check if the user is a member of a specific group.\"\"\"\n        return self.is_member_of_any([group])\n\n    def is_member_of_any(self, groups: List[Group]) -&gt; bool:\n\"\"\"Check to see if a user is a member of any of the groups in the list.\"\"\"\n        return bool([i for i in groups if i in self.groups.all()])\n\n    def namespaced_can(self, perm: str, namespace: Namespace) -&gt; bool:\n\"\"\"Check to see if the user can perform perm for namespace.\n\n        param: perm (permission string, 'has_[create|read|update|delete|namespace])\n        param: namespace (namespace object)\n        return True|False\n        \"\"\"\n        if not namespace_operation_exists(perm, fully_qualified=True):\n            raise MissingParam(f\"Unknown permission '{perm}' passed to namespaced_can.\")\n\n        # We need to check if the user is a member of a group\n        # that has the given permission the namespace.\n        groups = namespace.groups_that_can(perm)\n        return self.is_member_of_any(groups)\n\n    def has_namespace(\n        self,\n        namespace: Union[str, int],\n        write_perm: str = \"has_namespace\",\n    ):\n\"\"\"Check if the user has namespace permissions for the given namespace.\n\n        Only admin users can create or populate root namespaces.\n\n        For users, if the namespace isn't scoped (contains no dots), return False.\n        Otherwise, check if the user can:\n          - create the namespace (using has_namespace) or,\n          - create objects in the namespace (using has_create) on the last element.\n        \"\"\"\n        if isinstance(namespace, int):\n            try:\n                namespace_obj = Namespace.objects.get(pk=namespace)\n                return self.namespaced_can(write_perm, namespace_obj)\n            except Namespace.DoesNotExist as exc:\n                raise NotFound from exc\n\n        scope = namespace.split(\".\")\n        if len(scope) == 1:\n            return False\n\n        # This needs fixing for sub-namespaces.\n        target = scope\n        if write_perm == \"has_namespace\":\n            target = scope[-2]\n\n        try:\n            namespace_obj = Namespace.objects.get(name=target)\n        except Namespace.DoesNotExist as exc:\n            raise NotFound from exc\n\n        return self.namespaced_can(write_perm, namespace_obj)\n\n    #        try:\n    #            parent = Namespace.objects.get(name=scope[-1])\n    #        except Namespace.DoesNotExist:\n    #            return False\n\n    #        return Permission.objects.filter(\n    #            namespace=parent.id, has_namespace=True, group__in=self.groups.all()\n    #        ).exists()\n\n    # We want to ask for a HubuumNamespaceModel objects, but due to overloading we must\n    # also support user objects, anonymous users, generic django models, and None.\n    def has_perm(\n        self, perm: str, obj: Union[Model, AbstractUser, AnonymousUser, None] = None\n    ) -&gt; bool:\n\"\"\"Model (?) permissions check for an object.\n\n        perm: see permissions.py\n        obj: Hubuum Object\n        \"\"\"\n        field = None\n\n        try:\n            match = re.match(User.model_permissions_pattern, perm)\n            operation, model = match.groups()  # type: ignore\n        except AttributeError as exc:\n            raise MissingParam(\n                f\"Unknown permission '{perm}' passed to has_perm\"\n            ) from exc\n\n        if namespace_operation_exists(operation) and get_model(model):\n            field = \"has_\" + operation\n        else:\n            raise MissingParam(\n                f\"Unknown operation or model '{operation} / {model}' passed to has_perm\"\n            )\n\n        # We should always get an object to test against.\n        if obj:\n            return Permission.objects.filter(\n                namespace=obj.namespace, **{field: True}, group__in=self.groups.all()\n            ).exists()\n\n        return False\n\n    class Meta:\n\"\"\"Meta class for User.\"\"\"\n\n        ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.iam.User.group_list","title":"<code>group_list: List[str]</code>  <code>property</code>","text":"<p>List the names of all the groups the user is a member of.</p>"},{"location":"model/#hubuum.models.iam.User.Meta","title":"<code>Meta</code>","text":"<p>Meta class for User.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>class Meta:\n\"\"\"Meta class for User.\"\"\"\n\n    ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.iam.User.get_auto_id","title":"<code>get_auto_id()</code>","text":"<p>Return the auto id of the user.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def get_auto_id(self) -&gt; int:\n\"\"\"Return the auto id of the user.\"\"\"\n    return cast(int, self.id)\n</code></pre>"},{"location":"model/#hubuum.models.iam.User.group_count","title":"<code>group_count()</code>","text":"<p>Return the number of groups the user is a member of.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def group_count(self) -&gt; int:\n\"\"\"Return the number of groups the user is a member of.\"\"\"\n    return self.groups.count()\n</code></pre>"},{"location":"model/#hubuum.models.iam.User.has_namespace","title":"<code>has_namespace(namespace, write_perm='has_namespace')</code>","text":"<p>Check if the user has namespace permissions for the given namespace.</p> <p>Only admin users can create or populate root namespaces.</p> <p>For users, if the namespace isn't scoped (contains no dots), return False. Otherwise, check if the user can:   - create the namespace (using has_namespace) or,   - create objects in the namespace (using has_create) on the last element.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def has_namespace(\n    self,\n    namespace: Union[str, int],\n    write_perm: str = \"has_namespace\",\n):\n\"\"\"Check if the user has namespace permissions for the given namespace.\n\n    Only admin users can create or populate root namespaces.\n\n    For users, if the namespace isn't scoped (contains no dots), return False.\n    Otherwise, check if the user can:\n      - create the namespace (using has_namespace) or,\n      - create objects in the namespace (using has_create) on the last element.\n    \"\"\"\n    if isinstance(namespace, int):\n        try:\n            namespace_obj = Namespace.objects.get(pk=namespace)\n            return self.namespaced_can(write_perm, namespace_obj)\n        except Namespace.DoesNotExist as exc:\n            raise NotFound from exc\n\n    scope = namespace.split(\".\")\n    if len(scope) == 1:\n        return False\n\n    # This needs fixing for sub-namespaces.\n    target = scope\n    if write_perm == \"has_namespace\":\n        target = scope[-2]\n\n    try:\n        namespace_obj = Namespace.objects.get(name=target)\n    except Namespace.DoesNotExist as exc:\n        raise NotFound from exc\n\n    return self.namespaced_can(write_perm, namespace_obj)\n</code></pre>"},{"location":"model/#hubuum.models.iam.User.has_only_one_group","title":"<code>has_only_one_group()</code>","text":"<p>Return true if the user is a member of only one group.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def has_only_one_group(self) -&gt; bool:\n\"\"\"Return true if the user is a member of only one group.\"\"\"\n    return self.group_count() == 1\n</code></pre>"},{"location":"model/#hubuum.models.iam.User.has_perm","title":"<code>has_perm(perm, obj=None)</code>","text":"<p>Model (?) permissions check for an object.</p> <p>perm: see permissions.py obj: Hubuum Object</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def has_perm(\n    self, perm: str, obj: Union[Model, AbstractUser, AnonymousUser, None] = None\n) -&gt; bool:\n\"\"\"Model (?) permissions check for an object.\n\n    perm: see permissions.py\n    obj: Hubuum Object\n    \"\"\"\n    field = None\n\n    try:\n        match = re.match(User.model_permissions_pattern, perm)\n        operation, model = match.groups()  # type: ignore\n    except AttributeError as exc:\n        raise MissingParam(\n            f\"Unknown permission '{perm}' passed to has_perm\"\n        ) from exc\n\n    if namespace_operation_exists(operation) and get_model(model):\n        field = \"has_\" + operation\n    else:\n        raise MissingParam(\n            f\"Unknown operation or model '{operation} / {model}' passed to has_perm\"\n        )\n\n    # We should always get an object to test against.\n    if obj:\n        return Permission.objects.filter(\n            namespace=obj.namespace, **{field: True}, group__in=self.groups.all()\n        ).exists()\n\n    return False\n</code></pre>"},{"location":"model/#hubuum.models.iam.User.is_admin","title":"<code>is_admin()</code>","text":"<p>Check if the user is any type of admin (staff/superadmin) (or in a similar group?).</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def is_admin(self):\n\"\"\"Check if the user is any type of admin (staff/superadmin) (or in a similar group?).\"\"\"\n    return self.is_staff or self.is_superuser\n</code></pre>"},{"location":"model/#hubuum.models.iam.User.is_member_of","title":"<code>is_member_of(group)</code>","text":"<p>Check if the user is a member of a specific group.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def is_member_of(self, group: Group) -&gt; bool:\n\"\"\"Check if the user is a member of a specific group.\"\"\"\n    return self.is_member_of_any([group])\n</code></pre>"},{"location":"model/#hubuum.models.iam.User.is_member_of_any","title":"<code>is_member_of_any(groups)</code>","text":"<p>Check to see if a user is a member of any of the groups in the list.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def is_member_of_any(self, groups: List[Group]) -&gt; bool:\n\"\"\"Check to see if a user is a member of any of the groups in the list.\"\"\"\n    return bool([i for i in groups if i in self.groups.all()])\n</code></pre>"},{"location":"model/#hubuum.models.iam.User.namespaced_can","title":"<code>namespaced_can(perm, namespace)</code>","text":"<p>Check to see if the user can perform perm for namespace.</p> <p>param: perm (permission string, 'has_[create|read|update|delete|namespace]) param: namespace (namespace object) return True|False</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def namespaced_can(self, perm: str, namespace: Namespace) -&gt; bool:\n\"\"\"Check to see if the user can perform perm for namespace.\n\n    param: perm (permission string, 'has_[create|read|update|delete|namespace])\n    param: namespace (namespace object)\n    return True|False\n    \"\"\"\n    if not namespace_operation_exists(perm, fully_qualified=True):\n        raise MissingParam(f\"Unknown permission '{perm}' passed to namespaced_can.\")\n\n    # We need to check if the user is a member of a group\n    # that has the given permission the namespace.\n    groups = namespace.groups_that_can(perm)\n    return self.is_member_of_any(groups)\n</code></pre>"},{"location":"model/#hubuum.models.iam.User.supports_attachments","title":"<code>supports_attachments()</code>  <code>classmethod</code>","text":"<p>Check if a class supports attachments.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>@classmethod\ndef supports_attachments(cls) -&gt; bool:\n\"\"\"Check if a class supports attachments.\"\"\"\n    return False\n</code></pre>"},{"location":"model/#hubuum.models.iam.User.supports_extensions","title":"<code>supports_extensions()</code>  <code>classmethod</code>","text":"<p>Check if a class supports extensions.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>@classmethod\ndef supports_extensions(cls) -&gt; bool:\n\"\"\"Check if a class supports extensions.\"\"\"\n    return False\n</code></pre>"},{"location":"model/#hubuum.models.iam.get_group","title":"<code>get_group(group_identifier, raise_exception=True)</code>","text":"<p>Try to find a group based on the identifier.</p> <p>:param: group_identifier</p> <p>:return: group object</p> <p>:raises: NotFound if no object found.</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def get_group(group_identifier: str, raise_exception: bool = True) -&gt; Group:\n\"\"\"Try to find a group based on the identifier.\n\n    :param: group_identifier\n\n    :return: group object\n\n    :raises: NotFound if no object found.\n    \"\"\"\n    return get_object(\n        Group,\n        group_identifier,\n        lookup_fields=[\"id\", \"name\"],\n        raise_exception=raise_exception,\n    )\n</code></pre>"},{"location":"model/#hubuum.models.iam.get_user","title":"<code>get_user(user_identifier, raise_exception=True)</code>","text":"<p>Try to find a user based on the identifier.</p> <p>Searches in User.lookup_fields</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def get_user(user_identifier: str, raise_exception: bool = True) -&gt; User:\n\"\"\"Try to find a user based on the identifier.\n\n    Searches in User.lookup_fields\n    \"\"\"\n    return get_object(User, user_identifier, raise_exception=raise_exception)\n</code></pre>"},{"location":"model/#hubuum.models.iam.namespace_operation_exists","title":"<code>namespace_operation_exists(permission, fully_qualified=False)</code>","text":"<p>Check if a permission operation for a namespace exists.</p> <p>:param: permission (str) - the permission operation to check :param: fully_qualified (bool) - if True, the operation will be checked     against the fully qualified list of operations</p> <p>:returns: (bool) - True if the operation exists, False otherwise</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def namespace_operation_exists(permission: str, fully_qualified: bool = False) -&gt; bool:\n\"\"\"Check if a permission operation for a namespace exists.\n\n    :param: permission (str) - the permission operation to check\n    :param: fully_qualified (bool) - if True, the operation will be checked\n        against the fully qualified list of operations\n\n    :returns: (bool) - True if the operation exists, False otherwise\n    \"\"\"\n    if fully_qualified:\n        return permission in namespace_operations(fully_qualified=True)\n\n    return permission in namespace_operations()\n</code></pre>"},{"location":"model/#hubuum.models.iam.namespace_operations","title":"<code>namespace_operations(fully_qualified=False)</code>","text":"<p>Return a list of valid namespace permission operations.</p> <p>:param: fully_qualified (bool) - if True, the list will be fully qualified</p> <p>:returns: (list) - a list of valid namespace permission operations</p> Source code in <code>hubuum/models/iam.py</code> <pre><code>def namespace_operations(fully_qualified: bool = False) -&gt; List[str]:\n\"\"\"Return a list of valid namespace permission operations.\n\n    :param: fully_qualified (bool) - if True, the list will be fully qualified\n\n    :returns: (list) - a list of valid namespace permission operations\n    \"\"\"\n    operations: List[str] = [\"create\", \"read\", \"update\", \"delete\", \"namespace\"]\n    if fully_qualified:\n        operations = [\"has_\" + s for s in operations]\n\n    return operations\n</code></pre>"},{"location":"model/#resources-models","title":"Resources models","text":"<p>These are the main user-facing models. They are used to create the object one will work on day to day.</p> <p>Resource models.</p> <p>These models are the ones used by end users to create objects in Hubuum.</p>"},{"location":"model/#hubuum.models.resources.Host","title":"<code>Host</code>","text":"<p>         Bases: <code>NamespacedHubuumModelWithExtensions</code></p> <p>Host model, a portal into hosts of any kind.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>class Host(NamespacedHubuumModelWithExtensions):\n\"\"\"Host model, a portal into hosts of any kind.\"\"\"\n\n    name = models.CharField(max_length=255)\n    fqdn = models.CharField(max_length=255, blank=True)\n    # This may go away with tags...\n    type = models.ForeignKey(  # noqa: A003 (builtin-attribute-shadowing)\n        \"HostType\",\n        on_delete=models.DO_NOTHING,\n        related_name=\"hosts\",\n        blank=True,\n        null=True,\n    )\n    serial = models.CharField(max_length=255, blank=True)\n    registration_date = models.DateTimeField(auto_now_add=True)\n    room = models.ForeignKey(\n        \"Room\", on_delete=models.DO_NOTHING, related_name=\"hosts\", blank=True, null=True\n    )\n    jack = models.ForeignKey(\n        \"Jack\", on_delete=models.DO_NOTHING, related_name=\"hosts\", blank=True, null=True\n    )\n    purchase_order = models.ForeignKey(\n        \"PurchaseOrder\",\n        on_delete=models.DO_NOTHING,\n        related_name=\"hosts\",\n        blank=True,\n        null=True,\n    )\n\n    person = models.ForeignKey(\n        \"Person\",\n        on_delete=models.DO_NOTHING,\n        related_name=\"hosts\",\n        blank=True,\n        null=True,\n    )\n\n    class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n        ordering = [\"id\"]\n\n    def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n        return self.name\n</code></pre>"},{"location":"model/#hubuum.models.resources.Host.Meta","title":"<code>Meta</code>","text":"<p>Meta for the model.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n    ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.resources.Host.__str__","title":"<code>__str__()</code>","text":"<p>Stringify the object, used to represent the object towards users.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n    return self.name\n</code></pre>"},{"location":"model/#hubuum.models.resources.HostType","title":"<code>HostType</code>","text":"<p>         Bases: <code>NamespacedHubuumModelWithExtensions</code></p> <p>The type of hosts supported.</p> <p>These are a touple of a short name and a description, ie:</p> <p>name: mac_laptop description: An Apple Laptop running MacOS</p> <p>or</p> <p>name: std_office_computer description: A standard office computer running RHEL</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>class HostType(NamespacedHubuumModelWithExtensions):\n\"\"\"The type of hosts supported.\n\n    These are a touple of a short name and a description, ie:\n\n    name: mac_laptop\n    description: An Apple Laptop running MacOS\n\n    or\n\n    name: std_office_computer\n    description: A standard office computer running RHEL\n    \"\"\"\n\n    name = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n\n    class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n        ordering = [\"id\"]\n\n    def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n        return self.name\n</code></pre>"},{"location":"model/#hubuum.models.resources.HostType.Meta","title":"<code>Meta</code>","text":"<p>Meta for the model.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n    ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.resources.HostType.__str__","title":"<code>__str__()</code>","text":"<p>Stringify the object, used to represent the object towards users.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n    return self.name\n</code></pre>"},{"location":"model/#hubuum.models.resources.Jack","title":"<code>Jack</code>","text":"<p>         Bases: <code>NamespacedHubuumModelWithExtensions</code></p> <p>The wall end of a network jack.</p> <p>Like the marking of power outlets, there are standards for such things. In Norway, the relevant standard is NS 3457-7. https://www.standard.no/fagomrader/bygg-anlegg-og-eiendom/ns-3420-/klassifikasjon-av-byggverk---ns-3457/</p> <p>Typically, a jack exists in a room. You an also set a building if your room identifier by itself isn't unique.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>class Jack(NamespacedHubuumModelWithExtensions):\n\"\"\"The wall end of a network jack.\n\n    Like the marking of power outlets, there are standards for such things.\n    In Norway, the relevant standard is NS 3457-7.\n    https://www.standard.no/fagomrader/bygg-anlegg-og-eiendom/ns-3420-/klassifikasjon-av-byggverk---ns-3457/\n\n    Typically, a jack exists in a room. You an also set a building if your room\n    identifier by itself isn't unique.\n    \"\"\"\n\n    name = models.CharField(max_length=255)\n    room = models.ForeignKey(\n        \"Room\", models.CASCADE, db_column=\"room\", blank=True, null=True\n    )\n    building = models.CharField(max_length=255, blank=True)\n\n    def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n        return self.name\n\n    class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n        ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.resources.Jack.Meta","title":"<code>Meta</code>","text":"<p>Meta for the model.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n    ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.resources.Jack.__str__","title":"<code>__str__()</code>","text":"<p>Stringify the object, used to represent the object towards users.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n    return self.name\n</code></pre>"},{"location":"model/#hubuum.models.resources.Person","title":"<code>Person</code>","text":"<p>         Bases: <code>NamespacedHubuumModelWithExtensions</code></p> <p>A person.</p> <p>Persons have rooms. Computers may have people. It's all very cozy.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>class Person(NamespacedHubuumModelWithExtensions):\n\"\"\"A person.\n\n    Persons have rooms. Computers may have people. It's all very cozy.\n    \"\"\"\n\n    username = models.CharField(max_length=255)\n    room = models.ForeignKey(\n        \"Room\", models.CASCADE, db_column=\"room\", blank=True, null=True\n    )\n    section = models.IntegerField(blank=True, null=True)\n    department = models.CharField(max_length=255, blank=True)\n    email = models.EmailField(blank=True)\n    office_phone = models.CharField(max_length=255, blank=True)\n    mobile_phone = models.CharField(max_length=255, blank=True)\n\n    def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n        return self.username\n\n    class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n        ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.resources.Person.Meta","title":"<code>Meta</code>","text":"<p>Meta for the model.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n    ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.resources.Person.__str__","title":"<code>__str__()</code>","text":"<p>Stringify the object, used to represent the object towards users.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n    return self.username\n</code></pre>"},{"location":"model/#hubuum.models.resources.PurchaseOrder","title":"<code>PurchaseOrder</code>","text":"<p>         Bases: <code>NamespacedHubuumModelWithExtensions</code></p> <p>Accounting, the order.</p> <p>When something is bought there is typically some identifier for the purchase. This may help you when it comes to service and maintenance. Or disputes about money.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>class PurchaseOrder(NamespacedHubuumModelWithExtensions):\n\"\"\"Accounting, the order.\n\n    When something is bought there is typically some identifier for the purchase.\n    This may help you when it comes to service and maintenance.\n    Or disputes about money.\n    \"\"\"\n\n    vendor = models.ForeignKey(\n        \"Vendor\", models.CASCADE, db_column=\"vendor\", blank=True, null=True\n    )\n    order_date = models.DateTimeField(blank=True, null=True)\n    po_number = models.CharField(max_length=255, blank=False, null=False)\n\n    class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n        ordering = [\"id\"]\n\n    def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n        return str(self.po_number)\n</code></pre>"},{"location":"model/#hubuum.models.resources.PurchaseOrder.Meta","title":"<code>Meta</code>","text":"<p>Meta for the model.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n    ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.resources.PurchaseOrder.__str__","title":"<code>__str__()</code>","text":"<p>Stringify the object, used to represent the object towards users.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n    return str(self.po_number)\n</code></pre>"},{"location":"model/#hubuum.models.resources.Room","title":"<code>Room</code>","text":"<p>         Bases: <code>NamespacedHubuumModelWithExtensions</code></p> <p>A room.</p> <p>Possibly with a view. If your room_id contains a floor or building identifier, feel free to ignore the those fields. If your organization repeats room identifiers between buildings, you have my sympathies. If they repeat the room identifier per floor, well, ouch.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>class Room(NamespacedHubuumModelWithExtensions):\n\"\"\"A room.\n\n    Possibly with a view. If your room_id contains a floor or building identifier, feel free to\n    ignore the those fields. If your organization repeats room identifiers between buildings,\n    you have my sympathies. If they repeat the room identifier per floor, well, ouch.\n    \"\"\"\n\n    room_id = models.CharField(max_length=255)\n    building = models.CharField(max_length=255, blank=True)\n    floor = models.CharField(max_length=255, blank=True)\n\n    class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n        ordering = [\"id\"]\n\n    def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n        return self.room_id\n</code></pre>"},{"location":"model/#hubuum.models.resources.Room.Meta","title":"<code>Meta</code>","text":"<p>Meta for the model.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n    ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.resources.Room.__str__","title":"<code>__str__()</code>","text":"<p>Stringify the object, used to represent the object towards users.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n    return self.room_id\n</code></pre>"},{"location":"model/#hubuum.models.resources.Vendor","title":"<code>Vendor</code>","text":"<p>         Bases: <code>NamespacedHubuumModelWithExtensions</code></p> <p>A vendor, they sell you things.</p> <p>Say thank you. Call your vendor today.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>class Vendor(NamespacedHubuumModelWithExtensions):\n\"\"\"A vendor, they sell you things.\n\n    Say thank you. Call your vendor today.\n    \"\"\"\n\n    vendor_name = models.CharField(max_length=255)\n    vendor_url = models.URLField()\n    vendor_credentials = models.CharField(max_length=255, blank=True)\n    contact_name = models.CharField(max_length=255, blank=True)\n    contact_email = models.EmailField()\n    contact_phone = models.CharField(max_length=255, blank=True)\n\n    class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n        ordering = [\"id\"]\n\n    def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n        return self.vendor_name\n</code></pre>"},{"location":"model/#hubuum.models.resources.Vendor.Meta","title":"<code>Meta</code>","text":"<p>Meta for the model.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>class Meta:\n\"\"\"Meta for the model.\"\"\"\n\n    ordering = [\"id\"]\n</code></pre>"},{"location":"model/#hubuum.models.resources.Vendor.__str__","title":"<code>__str__()</code>","text":"<p>Stringify the object, used to represent the object towards users.</p> Source code in <code>hubuum/models/resources.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Stringify the object, used to represent the object towards users.\"\"\"\n    return self.vendor_name\n</code></pre>"},{"location":"permissions/","title":"Permissions","text":""},{"location":"permissions/#overview","title":"Overview","text":"<p>Hubuum supports permissions based on <code>namespaces</code>. A namespace is a collection of objects, and each object belongs to one and only one namespace. A namespace can be thought of as a project, or a tenant. </p> <p>Groups are given access to namespaces based on one of five boolean permissions: <code>read</code>, <code>create</code>, <code>update</code>, <code>delete</code> and <code>namespace</code>. These permissions are described in detail below.</p> <ul> <li><code>read</code>: The group can read the objects in the namespace, but not create or update them.</li> <li><code>create</code>: The group can create objects in the namespace, read is implied.</li> <li><code>update</code>: The group can update objects in the namespace, read is implied.</li> <li><code>delete</code>: The group can delete objects in the namespace, read is implied.</li> <li><code>namespace</code>: The group can create, read, update and delete objects in the namespace, and also create, read, update and delete the namespace itself.</li> </ul>"},{"location":"permissions/#example-usage","title":"Example usage","text":"<pre><code># Create a new namespace\nPOST /api/v1/namespaces/ -d '{\n    \"name\": \"example_namespace\"\n}'\n\n# Create a new group\nPOST /api/v1/groups/ -d '{\n    \"name\": \"example_group\"\n}'\n\n# Give the group read access to the namespace\nPOST /api/v1/namespaces/example_namespace/groups/example_group -d '{\n    \"read\": true\n}'\n</code></pre> <p>Warning</p> <p>Note that deleting a namespace deletes all objects in the namespace, and cannot be undone. Deleting the namespace also deletes all permission objects for the namespace, but the groups themselves are not deleted.</p>"},{"location":"swagger/","title":"Swagger","text":""},{"location":"terminology/","title":"Terminology","text":""},{"location":"terminology/#namespace","title":"Namespace","text":"<p>A namespace is a collection that an object belongs to. Every object in hubuum belongs to one and only one namespace. A namespace is identified by a unique name. A namespace can have zero or more groups with permissions for the namespace, and these groups can have zero or more users. Each group has a set of permissions to the namespace in question.</p>"},{"location":"terminology/#extension","title":"Extension","text":"<p>An extension adds a json_data field to an object. The json_data field can be used to store any data that is relevant to the object. The extension can also have a header and a URL. The header is a string that is sent to the URL when the object is requested, typically used for authorization. The URL is used to fetch data from an external source and store it in the json_data field. The URL may have interpolation fields that are replaced when the URL is fetched. Typically this interpolation is used to ensure a unique URL for each object.</p> <p>Extensions main purpose is to be able to dynamically update the data belonging to a model without having to update the model itself.</p>"},{"location":"terminology/#group","title":"Group","text":"<p>Groups contain users and have permissions for any number of namespaces.</p>"},{"location":"unit-tests/","title":"Testing","text":"<p><code>tox</code> is used as the testing framework. Apart from running the same tests as <code>python manage.py test</code>, it will test against multiple permutations of supported python and django versions.</p> <p>Tox is also used to run linting (<code>tox -e format</code> and <code>tox -e flake8</code>), as well as coveragev via <code>tox -e coverage</code>.</p>"},{"location":"unit-tests/#running-tests","title":"Running tests","text":"<p>To run the tests, simply run <code>tox</code> in the root directory of the project.</p> <p>Note that you may also use pytest directly, but this will only run the tests against one version python and django. You do however get the option to use <code>pytest -k</code> to run a specific test, which is useful for debugging. pytest is also handy as adding <code>-s</code> will also show the output of print statements.</p> <p>A common workflow is to run <code>pytest -k path/to/test_something.py -s -vv</code> to run a specific test and see the output of print statements.</p>"},{"location":"what_is_hubuum/","title":"What is hubuum?","text":"<p>Hubuum is a REST service that provides a shared interface for your resources.</p>"},{"location":"what_is_hubuum/#why-hubuum","title":"Why hubuum?","text":"<p>Most content management systems (CMDBs) are strongly opinionated. They provide fairly strict models with user interfaces designed for those models and all their data. This design may not be ideal for every use case.</p> <p>CMDBs also like to be authoritative for any data they possess. The problem with this in this day and age, very often other highly dedicated systems are the authoritative sources of lots and lots data, and these sources typically come with very domain specific scraping tools.</p> <p>Via extensions you can tell Hubuum where to find your data, from as many sources as you like, and attach it to the same objects. Hubuum  provides a unified API to access this data, irrespective of its original source. You may have data coming from Active Directory, an MDM solution, automation tools, monitoring solutions, query tools (fleet/osquery/etc), or any other source, and you can use Hubuum to access all of it.</p> <p>With hubuum you can...</p> <ul> <li>list all network devices and names a host has, and see if different sources give different answers.</li> <li>combine searches from different sources to find the resources you are looking for.</li> <li>cache data from other sources to reduce the load on those sources.</li> <li>control permissions to one object set in one application instead of having to do it in multiple places.</li> <li>know that REST is your interface, no matter what data you are accessing.</li> </ul> <p>Once upon a time your data was everywhere, each in its own silo. Now you can have it all in one place, and access it all through a single REST interface.</p>"}]}