[tool.poetry]
name = "hubuum"
version = "0.0.1"
description = "An infrastructure database."
authors = ["Terje Kvernes <terje@kvernes.no>"]
maintainers = ["Terje Kvernes <terje@kvernes.no>"]
readme = "README.md"
homepage = "https://terje.kvernes.no/hubuum/"
license = "CC0-1.0"
repository = "https://github.com/terjekv/hubuum/"
documentation = "https://terje.kvernes.no/hubuum/"
keywords = ["cmdb", "django", "rest"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 3",
    "Framework :: Django :: 4",
    "Intended Audience :: Information Technology",
    "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]

[tool.poetry.dependencies]
python = "^3.7"
Django = "^3 || ^4 || ^5"
djangorestframework = "3.14.0"
django_filter = "23.5"
django-structlog = "5.3.0"
django-rest-knox = "4.2.0"
gunicorn = "21.2.0"
rich = "13.7.0"                # Used for console logging.
typing_extensions = "4.7.1"
validators = "0.20.0"
jsonschema = "4.17.3"
python-dateutil = "2.8.2"

structlog_sentry = "2.0.3"
psycopg2-binary = "2.9.9"
pyyaml = "6.0.1"
uritemplate = "4.1.1"
sentry-sdk = "2.1.1"
cryptography = "42.0.4"

[tool.poetry.group.dev.dependencies]
ruff = "*"
coverage = { version = "*", extras = ["toml"] }
pytest = "*"
pytest-django = "*"
pytest-xdist = "*"
tox = "^4"

[tool.poetry.group.docs.dependencies]
mkdocs = "1.5.3"
mkdocs-material = "9.2.7"
mkdocs-swagger-ui-tag = "0.6.7"
mkdocs-git-revision-date-localized-plugin = "1.2.1"
mkdocstrings = { version = "0.22.0", extras = ["python"] }

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
source = ["hubuum", "hubuumsite"]
# concurrency = multiprocessing
# parallel = True
omit = ["hubuumsite/asgi.py", "hubuumsite/wsgi.py"]

[tool.coverage.report]
fail_under = 100
show_missing = true

[tool.ruff]
select = [
    "A", # flake8-builtins
    #    "ANN", # annotations
    #    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "D",   # pydocstyle
    "DJ",  # flake8-django
    "E",   # error
    "F",   # Pyflakes
    "I",   # isort
    "ISC", # flake8-implicit-str-concat
    "INP", # flake8-no-pep420 (implicit namespace packages, you need __init__.py)
    #    "PL", # pylint (all of the below)
    "PLC", # pylint-convention
    "PLE", # pylint-error
    #    "PLR", # pylint-refactor
    #    "PLW", # pylint-warning
    "W", # warnings        
]
ignore = [
    # D203 (1 blank line required before class docstring) is incompatible with
    # D211 (No blank lines allowed before class docstring). We ignore D203.
    "D203",
    # D213 (Multi-line docstring summary should start at the second line) is incompatible with
    # D212 (Multi-line docstring summary should start at the first line). We ignore D213.
    "D213",
    # ANN101 (Missing type annotation for `self` in method) is infered.
    "ANN101",
    # B905 zip() without an explicit strict= parameter set. strict=True causes the resulting iterator
    # to raise a ValueError if the arguments are exhausted at differing lengths. Added in python 3.10
    # and we support 3.7+.
    "B905",

    # Rules disabled due to using ruff as a formatter. Most of these rules
    # will thus be enforced by the formatter.
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",   # Indentation contains tabs
    "E111",   # Indentation is not a multiple of four
    "E114",   # Indentation is not a multiple of four (comment)
    "E117",   # Over-indented
    "D206",   # Docstring should be indented with spaces, not tabs
    "D300",   # Use """triple double quotes""" (found '''-quotes)
    "Q000",   # Remove bad quotes (inlined)
    "Q001",   # Remove bad quotes (multiline)
    "Q002",   # Remove bad quotes (docstring)
    "Q003",   # Avoidable escape quote
    "COM812", # Missing trailing comma in Python 3.6+
    "COM819", # Prohibited trailing comma    
    "ISC001", # Implicit string concatenation (single line)
    "ISC002", # Implicit string concatenation (multiline)

]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]
per-file-ignores = {}

line-length = 98

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
